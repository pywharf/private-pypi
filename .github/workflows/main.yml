name: build-and-push

on:
  push:

jobs:
  ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ["3.7", "3.8"]

    steps:
      - uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python_version }}

      - name: Setup pip/poetry
        run: |
          pip install -U pip poetry
          poetry config virtualenvs.create false

      - name: Install.
        run: poetry install

      - name: Lint.
        run: |
          pylint private_pypi_bundles
          yapf -d -r --style="$YAPF_STYLE" private_pypi_bundles
        env:
          YAPF_STYLE: '{based_on_style: google, continuation_indent_width: 8, dedent_closing_brackets: false, column_limit: 100}'

  publish:
    needs: [ci]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    services:
      private-pypi:
        image: privatepypi/private-pypi:0.1.0a17
        ports:
          - 8888:8888
        volumes:
          - private-pypi-root:/private-pypi-root
        env:
          PRIVATE_PYPI_COMMAND: server
          PRIVATE_PYPI_COMMAND_ROOT: /private-pypi-root

    steps:
      - uses: actions/checkout@v2

      - name: Setup private-pypi
        run: |
          curl \
            -d "config=${CONFIG}&admin_secret=${ADMIN_SECRET}" \
            -X POST \
            http://localhost:8888/initialize/
        env:
          CONFIG: |
            [private-pypi-pkg-repo]
            type = "github"
            owner = "private-pypi"
            repo = "private-pypi-pkg-repo"
          ADMIN_SECRET: |
            [private-pypi-pkg-repo]
            type = "github"
            raw = "${{ secrets.PRIVATE_PYPI_PKG_REPO_TOKEN }}"

      - name: Setup python
        uses: actions/setup-python@v1
        with:
          python-version: "3.8"

      - name: Setup pip/poetry
        run: |
          pip install -U pip poetry twine
          poetry config virtualenvs.create false

      - name: Build wheel
        run: poetry build -f wheel

      - name: Publish to private-pypi.
        run: twine upload --skip-existing --repository-url http://localhost:8888/simple/ dist/*
        env:
          TWINE_USERNAME: private-pypi-pkg-repo
          TWINE_PASSWORD: ${{ secrets.PRIVATE_PYPI_PKG_REPO_TOKEN }}

      - name: Publish to PyPI.
        run: twine upload --skip-existing dist/*
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

      - name: Docker build & publish.
        run: |
          PRIVATE_PYPI_VERSION=$(ls dist | python -c 'print(input().split("-")[1])')
          PRIVATE_PYPI_IMAGE=privatepypi/private-pypi:$PRIVATE_PYPI_VERSION

          if DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect $PRIVATE_PYPI_IMAGE > /dev/null; then
            echo "Image $PRIVATE_PYPI_IMAGE has already exist."
          else
            docker build \
              --build-arg PIP_INDEX_URL=http://private-pypi-pkg-repo:${{ secrets.PRIVATE_PYPI_PKG_REPO_TOKEN }}@localhost:8888/simple \
              --network host \
              -t $PRIVATE_PYPI_IMAGE \
              .

            docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
            docker push $PRIVATE_PYPI_IMAGE
          fi
